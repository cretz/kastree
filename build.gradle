buildscript {
    ext.kotlin_version = '1.3.21'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    group 'com.github.cretz.kastree'
    version '0.5.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}


project(':ast:ast-common') {
    apply plugin: 'kotlin-platform-common'
    sourceCompatibility = '1.6'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    }
    publishSettings(project, 'kastree-ast-common', 'Common library for Kastree AST')
}

project(':ast:ast-jvm') {
    apply plugin: 'kotlin-platform-jvm'
    sourceCompatibility = '1.6'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.6'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.6'
    }
    dependencies {
        expectedBy project(':ast:ast-common')
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
    test {
        testLogging {
            outputs.upToDateWhen {false}
            showStandardStreams = true
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }
    publishSettings(project, 'kastree-ast-jvm', 'JVM library for Kastree AST')
}

project(':ast-psi') {
    apply plugin: 'kotlin'
    sourceCompatibility = '1.8'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    dependencies {
        compile project(':ast:ast-jvm')
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlin_version"
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
    test {
        testLogging {
            outputs.upToDateWhen {false}
            showStandardStreams = true
            exceptionFormat = 'full'
            events 'passed', 'skipped', 'failed'
        }
    }
    publishSettings(project, 'kastree-ast-psi', 'JVM library Kastree parsing')
}

def publishSettings(project, projectName, projectDescription) {
    project.with {
        if (!project.hasProperty('ossrhUsername')) return
        apply plugin: 'maven'
        apply plugin: 'signing'

        archivesBaseName = projectName

        task packageSources(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
            if (project.name.endsWith('-jvm') || project.name.endsWith('-js')) {
                duplicatesStrategy = 'exclude'
                def commonProject = project.parent.subprojects.find { it.name.endsWith('-common') }
                from(sourceSets.main.allSource + commonProject.sourceSets.main.allSource)
            }
        }

        task packageJavadoc(type: Jar) {
            // Empty to satisfy Sonatype's javadoc.jar requirement
            classifier 'javadoc'
        }

        artifacts {
            archives packageSources, packageJavadoc
        }

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        name projectName
                        packaging 'jar'
                        description projectDescription
                        url 'https://github.com/cretz/kastree'
                        scm {
                            connection 'scm:git:git@github.com:cretz/kastree.git'
                            developerConnection 'scm:git:git@github.com:cretz/kastree.git'
                            url 'git@github.com:cretz/kastree.git'
                        }
                        licenses {
                            license {
                                name 'MIT License'
                                url 'https://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id 'cretz'
                                name 'Chad Retz'
                                url 'https://github.com/cretz'
                            }
                        }
                    }
                }
            }
        }
    }
}